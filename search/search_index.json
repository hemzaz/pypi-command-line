{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to pypi-command-line documentation \u00b6 pypi-command-line is a A powerful command line interface for pypi.org What is this? \u00b6 It's a command line interface [ ? ] that you can use to run commands [ ? ] in a terminal [ ? ] Why is this? \u00b6 There are a few alternatives that I've come across but none of those offer the same amount of functionality and beautifulness [ ? ] or even the same amount of speed . Installation and Usage \u00b6 For installation instructions see installation for instructions. For usage details see usage Alternatives \u00b6 pypi-cli \u00b6 Now this probably was the best option before pypi-command-line came out and even it has some flaws. The information command is pretty minimal, there's no way of seeing the github information, The download count doesn't work, the long descriptions aren't formatted at all. The search feature doesn't even work at all. It used to use the xml-rpc [ ? ] API that is discontinued therefore the feature doesn't work anymore. The stat command is broken and is badly formatted for screens that are not ultra high resolution. TL;DR The stat and search commands don't work anymore, the information command kinda works but the download count doesn't work, can't see github information. pypi-client \u00b6 So this can just search for packages on pypi and thats it. Now don't you think that this is inherently bad as per say. So I tried it out immediately and it just got stuck loading the packages, it gets all package names from pypi \u203e which took like 4 mins, then I assume it downloads the github stars? \u203e Which takes like another 3 mins and then It just asked me to authorize\u2026 like why does it even need authorization from me since github has a public api. And then it showed this which isn't really unreadable just badly formatted for screens that are not ultra high resolution. by changing the font size a bit I could make it look like this which still isn't bad just a bit convoluted. And even at the end the results are manually searched through therefore different from pypi \u203e TL;DR: Takes too long (\u22487 mins), Needs github authorization, badly formatted for non ultra-high-end monitors, searches manually so results are different compared to pypi Benchmarks for speed \u00b6 \u2026 search discord \u00b6 pypi-command-line - 1.4221807 Takes around 1.5 secs to do a get request to the pypi search page then parse and return the results so that the results are the exact same as shown in pypi.org pypi-client - 7.4170682 Takes 7 secs to get all packages and show ones containing discord, pypi-command-line can achieve the same result in 1.22 [ * ] seconds using pypi regex-search discord (the command allows you to search with regex) pypi-cli - doesn't work anymore The command doesn't work anymore since pypi has discontinued it's xml-rpc api \u203e \u2026 information django \u00b6 pypi-cli - 0.9757808 Now I do have to admit that this is faster, mainly because this does a single api call but mine does 3. You do have to realise that you are getting this instead of this pypi-command-line - 2.0484411 This does take longer but it's using that time to get not only the pypi stats but the proper download stats and github stats along with the pypi stats, disabling those lowers this time to 1.35 [ * ] seconds. pypi-client - can't see information You can't see project information with this package, you can only search for stuff. Notes: https://wasi-master.github.io/pypi-command-line/notes","title":"Home"},{"location":"#welcome-to-pypi-command-line-documentation","text":"pypi-command-line is a A powerful command line interface for pypi.org","title":"Welcome to pypi-command-line documentation"},{"location":"#what-is-this","text":"It's a command line interface [ ? ] that you can use to run commands [ ? ] in a terminal [ ? ]","title":"What is this?"},{"location":"#why-is-this","text":"There are a few alternatives that I've come across but none of those offer the same amount of functionality and beautifulness [ ? ] or even the same amount of speed .","title":"Why is this?"},{"location":"#installation-and-usage","text":"For installation instructions see installation for instructions. For usage details see usage","title":"Installation and Usage"},{"location":"#alternatives","text":"","title":"Alternatives"},{"location":"#pypi-cli","text":"Now this probably was the best option before pypi-command-line came out and even it has some flaws. The information command is pretty minimal, there's no way of seeing the github information, The download count doesn't work, the long descriptions aren't formatted at all. The search feature doesn't even work at all. It used to use the xml-rpc [ ? ] API that is discontinued therefore the feature doesn't work anymore. The stat command is broken and is badly formatted for screens that are not ultra high resolution. TL;DR The stat and search commands don't work anymore, the information command kinda works but the download count doesn't work, can't see github information.","title":"pypi-cli"},{"location":"#pypi-client","text":"So this can just search for packages on pypi and thats it. Now don't you think that this is inherently bad as per say. So I tried it out immediately and it just got stuck loading the packages, it gets all package names from pypi \u203e which took like 4 mins, then I assume it downloads the github stars? \u203e Which takes like another 3 mins and then It just asked me to authorize\u2026 like why does it even need authorization from me since github has a public api. And then it showed this which isn't really unreadable just badly formatted for screens that are not ultra high resolution. by changing the font size a bit I could make it look like this which still isn't bad just a bit convoluted. And even at the end the results are manually searched through therefore different from pypi \u203e TL;DR: Takes too long (\u22487 mins), Needs github authorization, badly formatted for non ultra-high-end monitors, searches manually so results are different compared to pypi","title":"pypi-client"},{"location":"#benchmarks-for-speed","text":"","title":"Benchmarks for speed"},{"location":"#search-discord","text":"pypi-command-line - 1.4221807 Takes around 1.5 secs to do a get request to the pypi search page then parse and return the results so that the results are the exact same as shown in pypi.org pypi-client - 7.4170682 Takes 7 secs to get all packages and show ones containing discord, pypi-command-line can achieve the same result in 1.22 [ * ] seconds using pypi regex-search discord (the command allows you to search with regex) pypi-cli - doesn't work anymore The command doesn't work anymore since pypi has discontinued it's xml-rpc api \u203e","title":"\u2026 search discord"},{"location":"#information-django","text":"pypi-cli - 0.9757808 Now I do have to admit that this is faster, mainly because this does a single api call but mine does 3. You do have to realise that you are getting this instead of this pypi-command-line - 2.0484411 This does take longer but it's using that time to get not only the pypi stats but the proper download stats and github stats along with the pypi stats, disabling those lowers this time to 1.35 [ * ] seconds. pypi-client - can't see information You can't see project information with this package, you can only search for stuff. Notes: https://wasi-master.github.io/pypi-command-line/notes","title":"\u2026 information django"},{"location":"install/","text":"Installation \u00b6 Installation Options \u00b6 I want it to be simple and easy \u00b6 If you want to keep it as simple as possible you can just do From PyPI pip install pypi-command-line From GitHub pip install git+https://github.com/wasi-master/pypi-command-line.git I want it to be fast \u00b6 If you want to make it fast then you can do From PyPI pip install \"pypi-command-line[speedups]\" From GitHub pip install \"pypi-command-line[speedups] @ git+https://github.com/wasi-master/pypi-command-line.git\" For an explanation on how this speeds up things see notes I will not use some commands \u00b6 If you only want to install dependencies for the commands you use then you can see notes and only install the dependencies you want: First you need to install it without any dependencies. From PyPI pip install --no-dependencies pypi-command-line From GitHub pip install --no-dependencies git+https://github.com/wasi-master/pypi-command-line.git Then you need to install the required dependencies for any of the commands to work. pip install rich, typer, requests, humanize Then install any of the extra dependencies you want according to the commands you need or the speed dependencies . For example if you only want the information command then you can just install packaging since it only requires that pip install packaging I don't have pip \u00b6 If for some reason you don't have pip then you should get pip. See instructions at https://pip.pypa.io/en/stable/installation/ then do it the ways showed above I want to clone then install \u00b6 You can also clone the repo with git and then install it using the setup.py file git clone https://github.com/wasi-master/pypi-command-line.git cd pypi-command-line python setup.py install Note You'll need git in order to do this Troubleshooting \u00b6 Command pip not found \u00b6 Error Messages Powershell pip : The term 'pip' is not recognized as the name of a cmdlet , function , script file , or operable program . Check the spelling of the name , or if a path was included , verify that the path is correct and try again . At line : 1 char : 1 + pip install pypi-command-line + ~~~ + CategoryInfo : ObjectNotFound : ( pip : String ) [], CommandNotFoundException + FullyQualifiedErrorId : CommandNotFoundException Command Prompt 'pip' is not recognized as an internal or external command, operable program or batch file. Bash pip: command not found Zsh zsh: command not found: pip If you get this error you should change pip to python -m pip and if it still doesn't work you should install pip again See instructions at https://pip.pypa.io/en/stable/installation/","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#installation-options","text":"","title":"Installation Options"},{"location":"install/#i-want-it-to-be-simple-and-easy","text":"If you want to keep it as simple as possible you can just do From PyPI pip install pypi-command-line From GitHub pip install git+https://github.com/wasi-master/pypi-command-line.git","title":"I want it to be simple and easy"},{"location":"install/#i-want-it-to-be-fast","text":"If you want to make it fast then you can do From PyPI pip install \"pypi-command-line[speedups]\" From GitHub pip install \"pypi-command-line[speedups] @ git+https://github.com/wasi-master/pypi-command-line.git\" For an explanation on how this speeds up things see notes","title":"I want it to be fast"},{"location":"install/#i-will-not-use-some-commands","text":"If you only want to install dependencies for the commands you use then you can see notes and only install the dependencies you want: First you need to install it without any dependencies. From PyPI pip install --no-dependencies pypi-command-line From GitHub pip install --no-dependencies git+https://github.com/wasi-master/pypi-command-line.git Then you need to install the required dependencies for any of the commands to work. pip install rich, typer, requests, humanize Then install any of the extra dependencies you want according to the commands you need or the speed dependencies . For example if you only want the information command then you can just install packaging since it only requires that pip install packaging","title":"I will not use some commands"},{"location":"install/#i-dont-have-pip","text":"If for some reason you don't have pip then you should get pip. See instructions at https://pip.pypa.io/en/stable/installation/ then do it the ways showed above","title":"I don't have pip"},{"location":"install/#i-want-to-clone-then-install","text":"You can also clone the repo with git and then install it using the setup.py file git clone https://github.com/wasi-master/pypi-command-line.git cd pypi-command-line python setup.py install Note You'll need git in order to do this","title":"I want to clone then install"},{"location":"install/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"install/#command-pip-not-found","text":"Error Messages Powershell pip : The term 'pip' is not recognized as the name of a cmdlet , function , script file , or operable program . Check the spelling of the name , or if a path was included , verify that the path is correct and try again . At line : 1 char : 1 + pip install pypi-command-line + ~~~ + CategoryInfo : ObjectNotFound : ( pip : String ) [], CommandNotFoundException + FullyQualifiedErrorId : CommandNotFoundException Command Prompt 'pip' is not recognized as an internal or external command, operable program or batch file. Bash pip: command not found Zsh zsh: command not found: pip If you get this error you should change pip to python -m pip and if it still doesn't work you should install pip again See instructions at https://pip.pypa.io/en/stable/installation/","title":"Command pip not found"},{"location":"notes/","text":"Notes \u00b6 This page explains certain aspects of the code. Optimizations \u00b6 Imports outside top level \u00b6 import statements can be executed just about anywhere. It's often useful to place them inside functions to restrict their visibility and/or reduce initial startup time. Although Python's interpreter is optimized to not import the same module multiple times, repeatedly executing an import statement can seriously affect performance in some circumstances. From https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Import_Statement_Overhead Because of this, I've added imports in each function that needs them instead of adding them at the top. since the user is only gonna run one single command the imports required for other commands don't need to be imported. Doing this saves around 500ms. Compiling regex in regex-search \u00b6 We compile the regex because it's almost twice as fast. Code Speedups \u00b6 You may have seen that you can do pip install \"pypi-command-line[speedups]\" and you may have wondered what that actually does. If you see the source code you can see these lines Now I think those comments explain what those do pretty well but here's a detailed explanation shellingham [ \u2191 ] \u00b6 This does not really speed up anything but adds auto shell detection for autocomplete installation using the --install-completion command. This technically lowers the amount of time taken to install autocompletion because it makes it so that you don't have to manually provide what terminal/shell you're using lxml [ \u2191 ] \u00b6 This is an alternative for the built-in html.parser that comes with python. There is also html5lib Table with parser comparisons supported by BeautifulSoup Parser Typical usage Advantages Disadvantages Python's html.parser BeautifulSoup(markup, \"html.parser\") Batteries included Decent speed Lenient (As of Python 2.7.3 and 3.2.) Not as fast as lxml, less lenient than html5lib. lxml's HTML parser BeautifulSoup(markup, \"lxml\") Very fast Lenient External C dependency lxml's XML parser BeautifulSoup(markup, \"lxml-xml\") BeautifulSoup(markup, \"xml\") Very fast The only currently supported XML parser External C dependency html5lib BeautifulSoup(markup, \"html5lib\") Extremely lenient Parses pages the same way a web browser does Creates valid HTML5 Very slow External Python dependency From If this is not installed it uses html.parser for html and xml.etree.ElementTree for xml. For XML lxml is more than 10 times faster than xml.etree.ElementTree [ \u203e ] For HTML lxml is more than 5 times faster than html.parser [ \u203e ] requests-cache [ \u2191 ] \u00b6 This allows http requests to be faster by caching [ ? ] them rapidfuzz [ \u2191 ] \u00b6 This allows rapid fuzzy string matching around 20 times faster than thefuzz Dependencies \u00b6 Rich \u00b6 This allows the beautiful formatting that you can see when using the commands. Colors , Tables , Panels , Progress Bars and much more. Typer \u00b6 This allows the command line interface to work properly. Although it's just a wrapper over click and the main stuff is done by click. typer adds some extra features over click such as autocompletion. That's why I've chosen typer over click. Requests \u00b6 For HTTP web requests Questionary \u00b6 For cool prompts. Humanize \u00b6 For human readable data bs4 (BeautifulSoup) \u00b6 For parsing html and xml data TheFuzz \u00b6 For fuzzy string matching Rich RST \u00b6 For pretty-printing reStructuredText descriptions Packaging \u00b6 For version parsing Wheel Filename \u00b6 For parsing wheel filenames Dependency Installation Notes \u00b6 Name Applicable Commands Note typer meta rich all requests meta humanize all bs4 search, new-packages (optional), new-releases (optional) If lxml and this both are installed then this is used for new-packages and new-releases and can provide up to a 5x improvement in speed and avoid a bug where the descriptions are not shown. questionary rtfd, browse, description (optional) For the description command, if the pypi page doesn't have a descripton, if it has mentions a single github repository then this is not required but if it mentions multiple github repos then you'll need to select one therefore this will be required thefuzz (optional) meta (command suggestions when an invalid command is used) If this is not available then it uses difflib rich-rst description (sometimes) This will only be required in the description command if the description is in reStructuredText shellingham (optional) --install-completion This is only required to install autocomplete for the current shell. without this you'd have to manually pass the shell as an argument to install-completion lxml (optional) search, new-packages (optional), new-releases (optional) For the search command this is a must have. for the new-packages and new-releases command this can provide up to 5x speed improvement and avoid a bug where the descriptions are not shown. requests-cache (optional) all rapidfuzz (optional) meta (command suggestions when an invalid command is used) If this is not available then it tries to use thefuzz and if both are not installed it tries to use difflib packaging wheels, information (optional) In the information command If this is not available then it uses distutils which is buggy at times wheel-filename wheels (optional) If the --supported-only flag is passed then this is required Cache \u00b6 The library caches packages and refreshes them per day. it also caches web requests and responses if requests-cache is installed For the packages cache it makes it so that the data doesn't need to be re-downloaded in the regex-search command. The data is around 2.75 mb (gzipped) when it's gotten from the web, and when it's stored locally as cache it takes around 5 mb. For the web requests cache it stores the recent few web requests so that if you are using the same command again it doesn't load the data again. This cache is automatically shortened by removing specific urls from the cache after they have expired depending on the url. Currently these are the cache expiry durations for commands Command Duration browse 3 hours description 3 hours if gotten from PyPI and 1 day if gotten from GitHub information 3 hours largest-files 1 day new-packages 1 minute new-releases 1 minute new-releases 3 hours regex-search 1 day releases 3 hours rtfd No cache needed wheels 3 hours","title":"Notes"},{"location":"notes/#notes","text":"This page explains certain aspects of the code.","title":"Notes"},{"location":"notes/#optimizations","text":"","title":"Optimizations"},{"location":"notes/#imports-outside-top-level","text":"import statements can be executed just about anywhere. It's often useful to place them inside functions to restrict their visibility and/or reduce initial startup time. Although Python's interpreter is optimized to not import the same module multiple times, repeatedly executing an import statement can seriously affect performance in some circumstances. From https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Import_Statement_Overhead Because of this, I've added imports in each function that needs them instead of adding them at the top. since the user is only gonna run one single command the imports required for other commands don't need to be imported. Doing this saves around 500ms.","title":"Imports outside top level"},{"location":"notes/#compiling-regex-in-regex-search","text":"We compile the regex because it's almost twice as fast. Code","title":"Compiling regex in regex-search"},{"location":"notes/#speedups","text":"You may have seen that you can do pip install \"pypi-command-line[speedups]\" and you may have wondered what that actually does. If you see the source code you can see these lines Now I think those comments explain what those do pretty well but here's a detailed explanation","title":"Speedups"},{"location":"notes/#shellingham","text":"This does not really speed up anything but adds auto shell detection for autocomplete installation using the --install-completion command. This technically lowers the amount of time taken to install autocompletion because it makes it so that you don't have to manually provide what terminal/shell you're using","title":"shellingham[\u2191]"},{"location":"notes/#lxml","text":"This is an alternative for the built-in html.parser that comes with python. There is also html5lib Table with parser comparisons supported by BeautifulSoup Parser Typical usage Advantages Disadvantages Python's html.parser BeautifulSoup(markup, \"html.parser\") Batteries included Decent speed Lenient (As of Python 2.7.3 and 3.2.) Not as fast as lxml, less lenient than html5lib. lxml's HTML parser BeautifulSoup(markup, \"lxml\") Very fast Lenient External C dependency lxml's XML parser BeautifulSoup(markup, \"lxml-xml\") BeautifulSoup(markup, \"xml\") Very fast The only currently supported XML parser External C dependency html5lib BeautifulSoup(markup, \"html5lib\") Extremely lenient Parses pages the same way a web browser does Creates valid HTML5 Very slow External Python dependency From If this is not installed it uses html.parser for html and xml.etree.ElementTree for xml. For XML lxml is more than 10 times faster than xml.etree.ElementTree [ \u203e ] For HTML lxml is more than 5 times faster than html.parser [ \u203e ]","title":"lxml[\u2191]"},{"location":"notes/#requests-cache","text":"This allows http requests to be faster by caching [ ? ] them","title":"requests-cache[\u2191]"},{"location":"notes/#rapidfuzz","text":"This allows rapid fuzzy string matching around 20 times faster than thefuzz","title":"rapidfuzz[\u2191]"},{"location":"notes/#dependencies","text":"","title":"Dependencies"},{"location":"notes/#rich","text":"This allows the beautiful formatting that you can see when using the commands. Colors , Tables , Panels , Progress Bars and much more.","title":"Rich"},{"location":"notes/#typer","text":"This allows the command line interface to work properly. Although it's just a wrapper over click and the main stuff is done by click. typer adds some extra features over click such as autocompletion. That's why I've chosen typer over click.","title":"Typer"},{"location":"notes/#requests","text":"For HTTP web requests","title":"Requests"},{"location":"notes/#questionary","text":"For cool prompts.","title":"Questionary"},{"location":"notes/#humanize","text":"For human readable data","title":"Humanize"},{"location":"notes/#bs4-beautifulsoup","text":"For parsing html and xml data","title":"bs4 (BeautifulSoup)"},{"location":"notes/#thefuzz","text":"For fuzzy string matching","title":"TheFuzz"},{"location":"notes/#rich-rst","text":"For pretty-printing reStructuredText descriptions","title":"Rich RST"},{"location":"notes/#packaging","text":"For version parsing","title":"Packaging"},{"location":"notes/#wheel-filename","text":"For parsing wheel filenames","title":"Wheel Filename"},{"location":"notes/#dependency-installation-notes","text":"Name Applicable Commands Note typer meta rich all requests meta humanize all bs4 search, new-packages (optional), new-releases (optional) If lxml and this both are installed then this is used for new-packages and new-releases and can provide up to a 5x improvement in speed and avoid a bug where the descriptions are not shown. questionary rtfd, browse, description (optional) For the description command, if the pypi page doesn't have a descripton, if it has mentions a single github repository then this is not required but if it mentions multiple github repos then you'll need to select one therefore this will be required thefuzz (optional) meta (command suggestions when an invalid command is used) If this is not available then it uses difflib rich-rst description (sometimes) This will only be required in the description command if the description is in reStructuredText shellingham (optional) --install-completion This is only required to install autocomplete for the current shell. without this you'd have to manually pass the shell as an argument to install-completion lxml (optional) search, new-packages (optional), new-releases (optional) For the search command this is a must have. for the new-packages and new-releases command this can provide up to 5x speed improvement and avoid a bug where the descriptions are not shown. requests-cache (optional) all rapidfuzz (optional) meta (command suggestions when an invalid command is used) If this is not available then it tries to use thefuzz and if both are not installed it tries to use difflib packaging wheels, information (optional) In the information command If this is not available then it uses distutils which is buggy at times wheel-filename wheels (optional) If the --supported-only flag is passed then this is required","title":"Dependency Installation Notes"},{"location":"notes/#cache","text":"The library caches packages and refreshes them per day. it also caches web requests and responses if requests-cache is installed For the packages cache it makes it so that the data doesn't need to be re-downloaded in the regex-search command. The data is around 2.75 mb (gzipped) when it's gotten from the web, and when it's stored locally as cache it takes around 5 mb. For the web requests cache it stores the recent few web requests so that if you are using the same command again it doesn't load the data again. This cache is automatically shortened by removing specific urls from the cache after they have expired depending on the url. Currently these are the cache expiry durations for commands Command Duration browse 3 hours description 3 hours if gotten from PyPI and 1 day if gotten from GitHub information 3 hours largest-files 1 day new-packages 1 minute new-releases 1 minute new-releases 3 hours regex-search 1 day releases 3 hours rtfd No cache needed wheels 3 hours","title":"Cache"},{"location":"smart_features/","text":"The smartness of pypi-command-line \u00b6 Autocompletion \u00b6 It supports command line argument autocompletion that can be used via pressing tab. Smart aliases \u00b6 You can write the first character(s) of the command and it will automatically get the command that starts with that character(s). Whenever it does this you'll get a message notifying you about that in case that was unexpected. It always tries not to show a command not found message unless the input doesn't match with any command (50% match is required). It asks the user which command they tried to use if it finds multiple matching commands If there are multiple commands that start with the specified character(s) then it shows a selection and asks the user to select a command. Caching packages and requests \u00b6 The package implements caching logic for faster load times Colored output everywhere \u00b6 It shows colored output wherever it can. help command, errors, command outputs Smart and Inituitive error handling \u00b6 Emojis \u00b6 It shows emojis for responses that makes it more \u2728beautiful\u2728 Command specific \u00b6 wheels \u00b6 In the wheels command it colorizes the seperate parts of the wheels for easy understanding Format \u00b6 The wheel filename is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl . distribution Distribution name, e.g. 'django', 'pyramid'. version Distribution version, e.g. 1.0. build tag ( Optional ) build number. Must start with a digit. Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags). Sort as an empty tuple if unspecified, else sort as a two-item tuple with the first item being the initial digits as an int , and the second item being the remainder of the tag as a str . language implementation and version tag E.g. 'py27', 'py2', 'py3'. abi tag E.g. 'p33m', 'abi3', 'none'. file extension E.g. '.whl'. For example, distribution-1.0-1-py27-none-any.whl is the first build of a package called 'distribution', and is compatible with Python 2.7 (any Python 2.7 implementation), with no ABI (pure Python), on any CPU architecture. The last three components of the filename before the extension are called \"compatibility tags.\" The compatibility tags express the package's basic interpreter requirements and are detailed in PEP 425 . - Gotten from https://www.python.org/dev/peps/pep-0427/#file-name-convention","title":"Smart Features"},{"location":"smart_features/#the-smartness-of-pypi-command-line","text":"","title":"The smartness of pypi-command-line"},{"location":"smart_features/#autocompletion","text":"It supports command line argument autocompletion that can be used via pressing tab.","title":"Autocompletion"},{"location":"smart_features/#smart-aliases","text":"You can write the first character(s) of the command and it will automatically get the command that starts with that character(s). Whenever it does this you'll get a message notifying you about that in case that was unexpected. It always tries not to show a command not found message unless the input doesn't match with any command (50% match is required). It asks the user which command they tried to use if it finds multiple matching commands If there are multiple commands that start with the specified character(s) then it shows a selection and asks the user to select a command.","title":"Smart aliases"},{"location":"smart_features/#caching-packages-and-requests","text":"The package implements caching logic for faster load times","title":"Caching packages and requests"},{"location":"smart_features/#colored-output-everywhere","text":"It shows colored output wherever it can. help command, errors, command outputs","title":"Colored output everywhere"},{"location":"smart_features/#smart-and-inituitive-error-handling","text":"","title":"Smart and Inituitive error handling"},{"location":"smart_features/#emojis","text":"It shows emojis for responses that makes it more \u2728beautiful\u2728","title":"Emojis"},{"location":"smart_features/#command-specific","text":"","title":"Command specific"},{"location":"smart_features/#wheels","text":"In the wheels command it colorizes the seperate parts of the wheels for easy understanding","title":"wheels"},{"location":"smart_features/#format","text":"The wheel filename is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl . distribution Distribution name, e.g. 'django', 'pyramid'. version Distribution version, e.g. 1.0. build tag ( Optional ) build number. Must start with a digit. Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags). Sort as an empty tuple if unspecified, else sort as a two-item tuple with the first item being the initial digits as an int , and the second item being the remainder of the tag as a str . language implementation and version tag E.g. 'py27', 'py2', 'py3'. abi tag E.g. 'p33m', 'abi3', 'none'. file extension E.g. '.whl'. For example, distribution-1.0-1-py27-none-any.whl is the first build of a package called 'distribution', and is compatible with Python 2.7 (any Python 2.7 implementation), with no ABI (pure Python), on any CPU architecture. The last three components of the filename before the extension are called \"compatibility tags.\" The compatibility tags express the package's basic interpreter requirements and are detailed in PEP 425 . - Gotten from https://www.python.org/dev/peps/pep-0427/#file-name-convention","title":"Format"},{"location":"usage/","text":"Usage \u00b6 Note: You'll have to install the package first. See https://wasi-master.github.io/pypi-command-line/install for instructions. Options \u00b6 -h, --help \u00b6 Sends a help message, each command also has this flag that you can use to see the help about that specific command Usage \u00b6 pypi -h pypi --help For comamnd specific help ( search in this case) pypi search --help --install-completion \u00b6 Installs autocompletion for the current shell. Demo \u00b6 Usage \u00b6 pypi --install-completion --show-completion \u00b6 See code for autocompletion for the current shell, to copy it or customize the installation. Demo \u00b6 The output will be different depending on the shell Usage \u00b6 pypi --show-completion --cache / --no-cache \u00b6 Whether to use cache or not for the current command, for more information about the cache see notes [ default: cache] Demo \u00b6 TODO: Add demo for --no-cache Usage \u00b6 pypi --no-cache --repository \u00b6 Specify a base url for the repository from which the results are taken from. Such as testpypi Demo \u00b6 TODO: Add demo for --repository Usage \u00b6 pypi --repository testpypi pypi --repository \"https://test.pypi.org\" Commands \u00b6 version \u00b6 See the latest version of the package or pypi-command-line How this works if if you specify a package name then it shows the top limit latest versions of that specified package, otherwise it shows the current version of pypi-command-line Demo \u00b6 TODO: Add demo Usage \u00b6 pypi version [PACKAGE_NAME] Options \u00b6 PACKAGE_NAME The name of the package to show the latest version(s) for. [ default: None] -h , --help Show the help message. browse \u00b6 Browse for a package's URLs. This gets the package information, and shows a list containing it's project urls. If the project has a maintainer email set then it also shows that as a mailto [ ? ] that you can press to send a email via your default email client. This gets all the project urls from PyPI and then shows them, there is a known bug where PyPI in some cases shows UNKNOWN for some url so that also gets shown. Demo \u00b6 You can cancel using Ctrl + C if you don't find your desired link Usage \u00b6 pypi browse PACKAGE_NAME Options \u00b6 PACKAGE_NAME The name of the package to show the urls for. -h , --help Show the help message. cache-clear \u00b6 Clears the local packages and requests cache, see notes for more information about the cache. Usage \u00b6 pypi cache-clear Errors and Warnings \u00b6 E: Failed to delete \\<file_path> \u00b6 Shown when it cannot delete a file due to some other process using it or not having enough permissions cache-information \u00b6 Shows the size for the packages cache and the size and additionally the websites cached with their creation date and expiry date, see notes for more information about the cache. Errors and Warnings \u00b6 W: Packages cache not available \u00b6 Shown when the packages cache doesn't exist due to it not being created yet or being deleted recently. You can rebuild that cache using cache-refresh W: Requests cache not available \u00b6 Shown when the requests cache doesn't exist due to the requests-cache package not being installed Usage \u00b6 pypi cache-information cache-refresh \u00b6 Reloads the packages cache and shows the number of new packages added after the last refresh, see notes for more information about the cache. Usage \u00b6 pypi cache-refresh description \u00b6 Shows the description of a package as gotten from PyPI or GitHub. This first gets the information about the package and then finds the descripton. If the package has a descripton it gets the description format, if it's reStructuredText or Markdown then it shows the description formatted according to the format. If it doesn't get a description in PyPI then it looks for github repos mentioned in the json response gotten from the pypi api. this makes sure it gets the repo if it is supplied no matter where it is. If it finds multiple repos then it asks the user to pick one. Then it uses the github api to find the name of the readme file of the repo, this uses the api instead of manually finding it just in case. Then it reads the contents from the readme file and determines the format using the file extension then it shows the description formatted according to the format. Demo \u00b6 Demo of getting description from github if pypi does not have one Usage \u00b6 pypi description [OPTIONS] PACKAGE_NAME Options \u00b6 PACKAGE_NAME Package to get the description for [required] - --force-github / --no-force-github Forcefully get the description from github [ default: no-force-github] This will make sure that it doesn't get the description from pypi but get it from github by reading the readme file of that project's repository - -h , --help Show the help message. Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist E: ReadMe not found \u00b6 Shown when --force-github is enabled or the PyPI page doesn't have a description and the github page also doesn't have a readme W: Multiple github repos \u00b6 Shown when --force-github is enabled or the PyPI page doesn't have a description. If this is shown it will ask you to pick one information \u00b6 The information command gets data from PyPI and GitHub and PyPIStats and shows them to the console Demo \u00b6 You can also see classifiers if you want to Usage \u00b6 pypi information [OPTIONS] PACKAGE_NAME Options \u00b6 PACKAGE_NAME [required] --version TEXT The version of the package to show information for - --show-classifiers / --no-show-classifiers Show the classifiers [ default: no-show-classifiers] - --hide-project-urls / --no-hide-project-urls Hide the project urls [ default: no-hide-project-urls] - --hide-requirements / --no-hide-requirements Hide the requirements [ default: no-hide-requirements] - --hide-github / --no-hide-github Hide the github [ default: no-hide-github] - --hide-stats / --no-hide-stats Hide the stats [ default: no-hide-stats] - --hide-meta / --no-hide-meta Hide the metadata [ default: no-hide-meta] - -h , --help Show the help message. Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist largest-files \u00b6 This command shows the all time largest pypi packages. The layout is simillar to the one found in PyPI Demo \u00b6 Usage \u00b6 pypi information [OPTIONS] Options \u00b6 -h , --help Show the help message. Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist new-packages \u00b6 Shows the top 40 newly added packages. Meaning that the first ever version of those packages were uploaded from pypi a short while ago. Usage \u00b6 pypi new-packages [OPTIONS] Options \u00b6 -h , --help Show the help message. ---author / --no--author Whether to show the project author or not [ default: no--author] This usually shows the author's email. ---link / --no--link Whether to show the project link or not [ default: -link] Errors and Warnings \u00b6 W: lxml not installed \u00b6 There is a known bug that occurs when lxml is not installed. It doesn't show descriptions in some cases. Please install lxml using pip install lxml . new-releases \u00b6 Shows the top 100 newly updated packages. Meaning that the latest version of those packages were uploaded from pypi short while ago. Usage \u00b6 pypi new-releases [OPTIONS] Options \u00b6 -h , --help Show the help message. ---author / --no--author Whether to show the project author or not [ default: no--author] This usually shows the author's email. ---link / --no--link Whether to show the project link or not [ default: -link] Errors and Warnings \u00b6 W: lxml not installed \u00b6 There is a known bug that occurs when lxml is not installed. It doesn't show descriptions in some cases. Please install lxml using pip install lxml . releases \u00b6 Shows all the available releases for a package. The --link argument can be used to also show the link of the releases. This is turned off by default and the link is added as a hyperlink to the package name on supported terminals Usage \u00b6 pypi releases [OPTIONS] PACKAGE_NAME Options \u00b6 PACKAGE_NAME The name of the package to show releases for -h , --help Show the help message. ---author / --no--author Whether to show the project author or not [ default: no--author] This usually shows the author's email. ---link / --no--link Whether to show the project link or not [ default: -link] Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist regex-search \u00b6 Regex stands for Regular Expressions. It allows you to search for all packages in PyPI and only show ones that match a specific Regular Expression [ ? ] If the packages cache is empty it then loads the packages first, the cache is kept for 1 day meaning your data is at most 1 day old. if you want to refresh you may do so by using the cache-refresh command. For more information about this cache see notes . Demo \u00b6 Usage \u00b6 pypi regex-search [OPTIONS] REGEX Options \u00b6 REGEX The regular expression to search with [required] --compact / --no-compact Compact formatting [ default: no-compact] This removes the table and just shows the package names seperated by commands, it also adds hyperlinks on supported terminals -h , --help Show the help message. releases \u00b6 Shows all the available releases for a package. This can help you determine what versions of a package are available on PyPI. Demo \u00b6 Usage \u00b6 pypi releases [OPTIONS] PACKAGE_NAME Options \u00b6 PACKAGE_NAME The name of package to show releases for [required] ---link / --no--link Display the links to the releases [ default: no--link] This is mostly not required unless you want to download that specific releases too but in that case pip install PACKAGE_NAME==x.x.x is better. And the link is already shown as a hyperlink on supported terminals. -h, --help Show the help message. Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist search \u00b6 Search for a package on PyPI. Demo \u00b6 Usage \u00b6 pypi search [OPTIONS] PACKAGE_NAME Options \u00b6 PACKAGE_NAME The name of the package to search for [required] --page INTEGER RANGE The page of the search results to show. [ default: 1; 1<=x<=500 ] -h, --help Shows the help message. Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning the page number specified most likely doesn't exist wheels \u00b6 See the available wheels of a release on PyPI. The wheel names are color coded and the information is colored too. Demo \u00b6 Usage \u00b6 pypi search [OPTIONS] PACKAGE_NAME [VERSION] Options \u00b6 PACKAGE_NAME The name of the package to show wheel info for [required] VERSION The version of the package to show info for, defaults to latest -h, --help Shows the help message. --supported-only Only show wheels supported on the current platform Wheel Name Syntax \u00b6 The wheel filename is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl . distribution Distribution name, e.g. 'pypi_command_line', 'django'. version Distribution version, e.g. 1.0. build tag ( Optional ) build number. Must start with a digit. Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags). Sort as an empty tuple if unspecified, else sort as a two-item tuple with the first item being the initial digits as an int , and the second item being the remainder of the tag as a str . language implementation and version tag E.g. 'py27', 'py2', 'py3'. abi tag E.g. 'p33m', 'abi3', 'none'. platform tag E.g. 'linux_x86_64', 'any'. platform tag E.g. 'linux_x86_64', 'any'. For example, distribution-1.0-1-py27-none-any.whl is the first build of a package called 'distribution', and is compatible with Python 2.7 (any Python 2.7 implementation), with no ABI (pure Python), on any CPU architecture. The last three components of the filename before the extension are called \"compatibility tags.\" The compatibility tags express the package's basic interpreter requirements and are detailed in PEP 425 . - Gotten from https://www.python.org/dev/peps/pep-0427/#file-name-convention Errors and Warnings \u00b6 E: Project not found \u00b6 Shown when the pypi api returns a 404 response meaning the project name specified doesn't exist. E: Version not found \u00b6 Shown when the specified version was not found.","title":"Usage"},{"location":"usage/#usage","text":"Note: You'll have to install the package first. See https://wasi-master.github.io/pypi-command-line/install for instructions.","title":"Usage"},{"location":"usage/#options","text":"","title":"Options"},{"location":"usage/#-h-help","text":"Sends a help message, each command also has this flag that you can use to see the help about that specific command","title":"-h, --help"},{"location":"usage/#usage_1","text":"pypi -h pypi --help For comamnd specific help ( search in this case) pypi search --help","title":"Usage"},{"location":"usage/#-install-completion","text":"Installs autocompletion for the current shell.","title":"--install-completion"},{"location":"usage/#demo","text":"","title":"Demo"},{"location":"usage/#usage_2","text":"pypi --install-completion","title":"Usage"},{"location":"usage/#-show-completion","text":"See code for autocompletion for the current shell, to copy it or customize the installation.","title":"--show-completion"},{"location":"usage/#demo_1","text":"The output will be different depending on the shell","title":"Demo"},{"location":"usage/#usage_3","text":"pypi --show-completion","title":"Usage"},{"location":"usage/#-cache-no-cache","text":"Whether to use cache or not for the current command, for more information about the cache see notes [ default: cache]","title":"--cache / --no-cache"},{"location":"usage/#demo_2","text":"TODO: Add demo for --no-cache","title":"Demo"},{"location":"usage/#usage_4","text":"pypi --no-cache","title":"Usage"},{"location":"usage/#-repository","text":"Specify a base url for the repository from which the results are taken from. Such as testpypi","title":"--repository"},{"location":"usage/#demo_3","text":"TODO: Add demo for --repository","title":"Demo"},{"location":"usage/#usage_5","text":"pypi --repository testpypi pypi --repository \"https://test.pypi.org\"","title":"Usage"},{"location":"usage/#commands","text":"","title":"Commands"},{"location":"usage/#version","text":"See the latest version of the package or pypi-command-line How this works if if you specify a package name then it shows the top limit latest versions of that specified package, otherwise it shows the current version of pypi-command-line","title":"version"},{"location":"usage/#demo_4","text":"TODO: Add demo","title":"Demo"},{"location":"usage/#usage_6","text":"pypi version [PACKAGE_NAME]","title":"Usage"},{"location":"usage/#options_1","text":"PACKAGE_NAME The name of the package to show the latest version(s) for. [ default: None] -h , --help Show the help message.","title":"Options"},{"location":"usage/#browse","text":"Browse for a package's URLs. This gets the package information, and shows a list containing it's project urls. If the project has a maintainer email set then it also shows that as a mailto [ ? ] that you can press to send a email via your default email client. This gets all the project urls from PyPI and then shows them, there is a known bug where PyPI in some cases shows UNKNOWN for some url so that also gets shown.","title":"browse"},{"location":"usage/#demo_5","text":"You can cancel using Ctrl + C if you don't find your desired link","title":"Demo"},{"location":"usage/#usage_7","text":"pypi browse PACKAGE_NAME","title":"Usage"},{"location":"usage/#options_2","text":"PACKAGE_NAME The name of the package to show the urls for. -h , --help Show the help message.","title":"Options"},{"location":"usage/#cache-clear","text":"Clears the local packages and requests cache, see notes for more information about the cache.","title":"cache-clear"},{"location":"usage/#usage_8","text":"pypi cache-clear","title":"Usage"},{"location":"usage/#errors-and-warnings","text":"","title":"Errors and Warnings"},{"location":"usage/#e-failed-to-delete-file_path","text":"Shown when it cannot delete a file due to some other process using it or not having enough permissions","title":"E: Failed to delete \\&lt;file_path>"},{"location":"usage/#cache-information","text":"Shows the size for the packages cache and the size and additionally the websites cached with their creation date and expiry date, see notes for more information about the cache.","title":"cache-information"},{"location":"usage/#errors-and-warnings_1","text":"","title":"Errors and Warnings"},{"location":"usage/#w-packages-cache-not-available","text":"Shown when the packages cache doesn't exist due to it not being created yet or being deleted recently. You can rebuild that cache using cache-refresh","title":"W: Packages cache not available"},{"location":"usage/#w-requests-cache-not-available","text":"Shown when the requests cache doesn't exist due to the requests-cache package not being installed","title":"W: Requests cache not available"},{"location":"usage/#usage_9","text":"pypi cache-information","title":"Usage"},{"location":"usage/#cache-refresh","text":"Reloads the packages cache and shows the number of new packages added after the last refresh, see notes for more information about the cache.","title":"cache-refresh"},{"location":"usage/#usage_10","text":"pypi cache-refresh","title":"Usage"},{"location":"usage/#description","text":"Shows the description of a package as gotten from PyPI or GitHub. This first gets the information about the package and then finds the descripton. If the package has a descripton it gets the description format, if it's reStructuredText or Markdown then it shows the description formatted according to the format. If it doesn't get a description in PyPI then it looks for github repos mentioned in the json response gotten from the pypi api. this makes sure it gets the repo if it is supplied no matter where it is. If it finds multiple repos then it asks the user to pick one. Then it uses the github api to find the name of the readme file of the repo, this uses the api instead of manually finding it just in case. Then it reads the contents from the readme file and determines the format using the file extension then it shows the description formatted according to the format.","title":"description"},{"location":"usage/#demo_6","text":"Demo of getting description from github if pypi does not have one","title":"Demo"},{"location":"usage/#usage_11","text":"pypi description [OPTIONS] PACKAGE_NAME","title":"Usage"},{"location":"usage/#options_3","text":"PACKAGE_NAME Package to get the description for [required] - --force-github / --no-force-github Forcefully get the description from github [ default: no-force-github] This will make sure that it doesn't get the description from pypi but get it from github by reading the readme file of that project's repository - -h , --help Show the help message.","title":"Options"},{"location":"usage/#errors-and-warnings_2","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found","text":"Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist","title":"E: Project not found"},{"location":"usage/#e-readme-not-found","text":"Shown when --force-github is enabled or the PyPI page doesn't have a description and the github page also doesn't have a readme","title":"E: ReadMe not found"},{"location":"usage/#w-multiple-github-repos","text":"Shown when --force-github is enabled or the PyPI page doesn't have a description. If this is shown it will ask you to pick one","title":"W: Multiple github repos"},{"location":"usage/#information","text":"The information command gets data from PyPI and GitHub and PyPIStats and shows them to the console","title":"information"},{"location":"usage/#demo_7","text":"You can also see classifiers if you want to","title":"Demo"},{"location":"usage/#usage_12","text":"pypi information [OPTIONS] PACKAGE_NAME","title":"Usage"},{"location":"usage/#options_4","text":"PACKAGE_NAME [required] --version TEXT The version of the package to show information for - --show-classifiers / --no-show-classifiers Show the classifiers [ default: no-show-classifiers] - --hide-project-urls / --no-hide-project-urls Hide the project urls [ default: no-hide-project-urls] - --hide-requirements / --no-hide-requirements Hide the requirements [ default: no-hide-requirements] - --hide-github / --no-hide-github Hide the github [ default: no-hide-github] - --hide-stats / --no-hide-stats Hide the stats [ default: no-hide-stats] - --hide-meta / --no-hide-meta Hide the metadata [ default: no-hide-meta] - -h , --help Show the help message.","title":"Options"},{"location":"usage/#errors-and-warnings_3","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found_1","text":"Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist","title":"E: Project not found"},{"location":"usage/#largest-files","text":"This command shows the all time largest pypi packages. The layout is simillar to the one found in PyPI","title":"largest-files"},{"location":"usage/#demo_8","text":"","title":"Demo"},{"location":"usage/#usage_13","text":"pypi information [OPTIONS]","title":"Usage"},{"location":"usage/#options_5","text":"-h , --help Show the help message.","title":"Options"},{"location":"usage/#errors-and-warnings_4","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found_2","text":"Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist","title":"E: Project not found"},{"location":"usage/#new-packages","text":"Shows the top 40 newly added packages. Meaning that the first ever version of those packages were uploaded from pypi a short while ago.","title":"new-packages"},{"location":"usage/#usage_14","text":"pypi new-packages [OPTIONS]","title":"Usage"},{"location":"usage/#options_6","text":"-h , --help Show the help message. ---author / --no--author Whether to show the project author or not [ default: no--author] This usually shows the author's email. ---link / --no--link Whether to show the project link or not [ default: -link]","title":"Options"},{"location":"usage/#errors-and-warnings_5","text":"","title":"Errors and Warnings"},{"location":"usage/#w-lxml-not-installed","text":"There is a known bug that occurs when lxml is not installed. It doesn't show descriptions in some cases. Please install lxml using pip install lxml .","title":"W: lxml not installed"},{"location":"usage/#new-releases","text":"Shows the top 100 newly updated packages. Meaning that the latest version of those packages were uploaded from pypi short while ago.","title":"new-releases"},{"location":"usage/#usage_15","text":"pypi new-releases [OPTIONS]","title":"Usage"},{"location":"usage/#options_7","text":"-h , --help Show the help message. ---author / --no--author Whether to show the project author or not [ default: no--author] This usually shows the author's email. ---link / --no--link Whether to show the project link or not [ default: -link]","title":"Options"},{"location":"usage/#errors-and-warnings_6","text":"","title":"Errors and Warnings"},{"location":"usage/#w-lxml-not-installed_1","text":"There is a known bug that occurs when lxml is not installed. It doesn't show descriptions in some cases. Please install lxml using pip install lxml .","title":"W: lxml not installed"},{"location":"usage/#releases","text":"Shows all the available releases for a package. The --link argument can be used to also show the link of the releases. This is turned off by default and the link is added as a hyperlink to the package name on supported terminals","title":"releases"},{"location":"usage/#usage_16","text":"pypi releases [OPTIONS] PACKAGE_NAME","title":"Usage"},{"location":"usage/#options_8","text":"PACKAGE_NAME The name of the package to show releases for -h , --help Show the help message. ---author / --no--author Whether to show the project author or not [ default: no--author] This usually shows the author's email. ---link / --no--link Whether to show the project link or not [ default: -link]","title":"Options"},{"location":"usage/#errors-and-warnings_7","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found_3","text":"Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist","title":"E: Project not found"},{"location":"usage/#regex-search","text":"Regex stands for Regular Expressions. It allows you to search for all packages in PyPI and only show ones that match a specific Regular Expression [ ? ] If the packages cache is empty it then loads the packages first, the cache is kept for 1 day meaning your data is at most 1 day old. if you want to refresh you may do so by using the cache-refresh command. For more information about this cache see notes .","title":"regex-search"},{"location":"usage/#demo_9","text":"","title":"Demo"},{"location":"usage/#usage_17","text":"pypi regex-search [OPTIONS] REGEX","title":"Usage"},{"location":"usage/#options_9","text":"REGEX The regular expression to search with [required] --compact / --no-compact Compact formatting [ default: no-compact] This removes the table and just shows the package names seperated by commands, it also adds hyperlinks on supported terminals -h , --help Show the help message.","title":"Options"},{"location":"usage/#releases_1","text":"Shows all the available releases for a package. This can help you determine what versions of a package are available on PyPI.","title":"releases"},{"location":"usage/#demo_10","text":"","title":"Demo"},{"location":"usage/#usage_18","text":"pypi releases [OPTIONS] PACKAGE_NAME","title":"Usage"},{"location":"usage/#options_10","text":"PACKAGE_NAME The name of package to show releases for [required] ---link / --no--link Display the links to the releases [ default: no--link] This is mostly not required unless you want to download that specific releases too but in that case pip install PACKAGE_NAME==x.x.x is better. And the link is already shown as a hyperlink on supported terminals. -h, --help Show the help message.","title":"Options"},{"location":"usage/#errors-and-warnings_8","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found_4","text":"Shown when the pypi api returns a 404 response meaning a package with the specified name most likely doesn't exist","title":"E: Project not found"},{"location":"usage/#search","text":"Search for a package on PyPI.","title":"search"},{"location":"usage/#demo_11","text":"","title":"Demo"},{"location":"usage/#usage_19","text":"pypi search [OPTIONS] PACKAGE_NAME","title":"Usage"},{"location":"usage/#options_11","text":"PACKAGE_NAME The name of the package to search for [required] --page INTEGER RANGE The page of the search results to show. [ default: 1; 1<=x<=500 ] -h, --help Shows the help message.","title":"Options"},{"location":"usage/#errors-and-warnings_9","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found_5","text":"Shown when the pypi api returns a 404 response meaning the page number specified most likely doesn't exist","title":"E: Project not found"},{"location":"usage/#wheels","text":"See the available wheels of a release on PyPI. The wheel names are color coded and the information is colored too.","title":"wheels"},{"location":"usage/#demo_12","text":"","title":"Demo"},{"location":"usage/#usage_20","text":"pypi search [OPTIONS] PACKAGE_NAME [VERSION]","title":"Usage"},{"location":"usage/#options_12","text":"PACKAGE_NAME The name of the package to show wheel info for [required] VERSION The version of the package to show info for, defaults to latest -h, --help Shows the help message. --supported-only Only show wheels supported on the current platform","title":"Options"},{"location":"usage/#wheel-name-syntax","text":"The wheel filename is {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl . distribution Distribution name, e.g. 'pypi_command_line', 'django'. version Distribution version, e.g. 1.0. build tag ( Optional ) build number. Must start with a digit. Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags). Sort as an empty tuple if unspecified, else sort as a two-item tuple with the first item being the initial digits as an int , and the second item being the remainder of the tag as a str . language implementation and version tag E.g. 'py27', 'py2', 'py3'. abi tag E.g. 'p33m', 'abi3', 'none'. platform tag E.g. 'linux_x86_64', 'any'. platform tag E.g. 'linux_x86_64', 'any'. For example, distribution-1.0-1-py27-none-any.whl is the first build of a package called 'distribution', and is compatible with Python 2.7 (any Python 2.7 implementation), with no ABI (pure Python), on any CPU architecture. The last three components of the filename before the extension are called \"compatibility tags.\" The compatibility tags express the package's basic interpreter requirements and are detailed in PEP 425 . - Gotten from https://www.python.org/dev/peps/pep-0427/#file-name-convention","title":"Wheel Name Syntax"},{"location":"usage/#errors-and-warnings_10","text":"","title":"Errors and Warnings"},{"location":"usage/#e-project-not-found_6","text":"Shown when the pypi api returns a 404 response meaning the project name specified doesn't exist.","title":"E: Project not found"},{"location":"usage/#e-version-not-found","text":"Shown when the specified version was not found.","title":"E: Version not found"}]}